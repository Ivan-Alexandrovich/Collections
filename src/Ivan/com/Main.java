package Ivan.com;

import java.util.*;


public class Main {

    public static void main(String[] args) {
        //firstTask();
        secondTask();
    }

    public static void firstTask() {
        /*1 Создать массив с набором слов (10-20 слов, должны встречаться повторяющиеся).
                Найти и вывести список уникальных слов, из которых состоит массив (дубликаты не
                считаем). Посчитать сколько раз встречается каждое слово.*/

        List<String> wordArray = new ArrayList<>(); //создали пустой список
        wordArray = ArrayOperation.fillArray(wordArray); //вызвали метод fillArray, который нам заполнил список wordArray
        System.out.println("Initial list: " + wordArray); //вывод на экран списка wordArray

        ArrayOperation.printUniqueWords(wordArray); //метод printUniqueWords статический поэтому необязательно создавать
        // объект класса ArrayOperation чтобы вызвать метод. Этот метод должен вывести нам уникальные элементы в списке
        // wordArray и сколько раз элементы повторялись внутри него
        wordArray.clear(); //очистили поток wordArray
    }

    public static void secondTask() {
        /*2 Написать простой класс Телефонный Справочник, который хранит в себе список фамилий и телефонных номеров.
        В этот телефонный справочник с помощью метода add()можно добавлять записи. С помощью метода get() искать номер
        телефона по фамилии. Следует учесть, что под одной фамилией может быть несколько телефонов (в случае
        однофамильцев), тогда при запросе такой фамилии должны выводиться все телефоны.
        Желательно как можно меньше добавлять своего, чего нет в задании (т.е. не надо в телефонную запись добавлять еще
        дополнительные поля (имя, отчество, адрес), делать взаимодействие с пользователем через консоль и т.д.).
        Консоль желательно не использовать (в том числе Scanner), тестировать просто из метода main() прописывая add() и get().*/

        TelephoneBook telephoneBook = new TelephoneBook(); //создание словаря: ключ-номер телефона (он уникален),
        //значение - фамилия, она может и повторяться, ключ всегда уникален! при добавлении нового элемента с таким же ключом
        //новое значение перезапишется в колонку с ключом, но элемента не прибавится, доступ к значениям - через ключ
        telephoneBook.add("89168848412", "Boichenko");//добавление элементов в словарь
        telephoneBook.add("89162884468", "Boichenko");
        telephoneBook.add("89162358554", "Kopalkin");
        telephoneBook.add("89267943072", "Kopalkin");
        telephoneBook.add("89857719397", "Sorokina");

        telephoneBook.get("Boichenko"); //получение ключей (номеров телефона) по значению (фамилии)
        telephoneBook.get("Kopalkin");
        telephoneBook.get("Sorokin");
    }
}
